@page "/"
@using EgressPortal.Services.Interfaces
@using System.Net
@inject IEgressServices EgressServices

<HeadContent>
    <link href="css/index.css" rel="stylesheet"/>
</HeadContent>

<PageTitle>Portal de Egressos da UESC</PageTitle>


<div class="d-flex flex-column align-items-center w-100 banner_index">
    <div class="d-flex m-0 p-0 w-100" style="max-width: 1200px">
        <MudGrid Class="d-flex m-0 p-0">
            <MudItem xs="12" sm="12" md="3" lg="3" Class="d-flex m-0 mb-3 p-0 text-start align-items-center align-content-center justify-content-center">
                <MudImage Src="img/index/banner_left.png" Alt="Estudante" Class="w-100" Style="max-width: 300px;"/>
            </MudItem>
            <MudItem xs="8" sm="8" md="7" lg="7" Class="d-flex flex-column m-0 px-3 py-5 gap-3 justify-content-center">
                <MudText Typo="Typo.subtitle1" Color="Color.Warning" Class="fw-bold">SEJA BEM VINDO AO PORTAL DE EGRESSOS!</MudText>
                <MudText Typo="Typo.body1" Align="Align.Justify" Class="text_color_white">Aqui você poderá conhecer melhor o perfil do egresso da Universidade Estadual de Santa Cruz - UESC, localizado na cidade de Ilhéus - Bahia.</MudText>
                <MudText Typo="Typo.body1" Align="Align.Justify" Class="text_color_white">Se você é um egresso, faça seu cadastro.</MudText>
                <div class="d-flex w-100 justify-content-end px-5">
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning">Cadastro</MudButton>
                </div>
            </MudItem>
            <MudItem xs="4" sm="4" md="2" lg="2" Class="d-flex m-0 p-0 justify-content-end align-items-end">
                <MudImage Src="img/index/banner_right.png" Alt="Logo universidade" Class="banner_right"/>
            </MudItem>
        </MudGrid>
    </div>
</div>

<div class="d-flex flex-column align-items-center w-100 py-5">
    <div class="d-flex w-100" style="max-width: 1200px">
        <MudGrid Class="d-flex m-0 p-0 align-items-center">
            <MudItem xs="12" sm="12" md="5" lg="5" Class="d-flex m-0 p-0">
                <MudGrid Class="d-flex m-0 p-0">
                    <MudItem xs="2" sm="2" md="2" lg="2" Class="d-flex m-0 p-0">
                        <svg width="60" height="300" viewBox="0 0 81 402" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M81 201L0.75 401.052L0.75 0.948135L81 201Z" fill="#14D4A5"/>
                        </svg>
                    </MudItem>
                    <MudItem xs="10" sm="10" md="10" lg="10" Class="d-flex p-5 justify-content-center align-items-center align-content-center m-0 p-0">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.h6" Class="fw-bold" Style="color: #3E4095">TOTAL DE</MudText>
                            <MudText Typo="Typo.h4" Class="fw-bold" Color="Color.Dark">EGRESSOS</MudText>
                            <MudText Typo="Typo.h1" Class="fw-bold m-0 p-0" Color="Color.Dark">
                                @if (_hasSuccessfullyRequestCountEgress)
                                {
                                    @_egressQuantity
                                }
                                else
                                {
                                    <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Text"/>
                                }
                            </MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" sm="12" md="7" lg="7" Class="m-0 py-2 px-5">
                @if (_hasSuccessfullyRequestCountEgress)
                {
                    <MudChart ChartType="ChartType.Bar" ChartOptions="new ChartOptions { YAxisLines = true, XAxisLines = true }" ChartSeries="@_series" @bind-SelectedIndex="_indexGraph" XAxisLabels="@_xAxisLabels" Width="100%" Height="300px" LegendPosition="Position.Bottom">
                        <CustomGraphics>
                            <text x="0" y="10">Total</text>
                        </CustomGraphics>
                    </MudChart>
                }
                else
                {
                    <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="300px"/>
                }
            </MudItem>
        </MudGrid>
    </div>
</div>

<div class="d-flex flex-column align-items-center w-100 py-5 highlights_main">
    <div class="d-flex w-100" style="max-width: 1200px">

        <MudGrid Class="d-flex m-0 p-0 align-items-center">
            <MudItem xs="12" sm="12" md="3" lg="3" Class="d-flex m-0 py-2 p-0 align-items-center">
                <MudGrid Class="d-flex m-0 p-0">
                    <MudItem xs="3" sm="3" md="3" lg="3" Class="d-flex m-0 p-0 justify-content-start">
                        <svg width="60" height="300" viewBox="0 0 81 374" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M81 187L0.75 373.195L0.75 0.804535L81 187Z" fill="white"/>
                        </svg>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="9" lg="9" Class="d-flex p-5 justify-content-center align-items-center align-content-center m-0 p-0">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.h5" Class="fw-bold text_color_white">DISCENTE<br/>DISTAQUE</MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem xs="12" sm="12" md="9" lg="9" Class="d-flex m-0 p-0 w-100">
                <MudGrid Class="d-flex m-0 p-0 w-100 justify-content-between">
                    @for (var i = 0; i < 3; i++)
                    {
                        <MudItem xs="12" sm="12" md="4" lg="4" Class="d-flex justify-content-center p-0 m-0 mb-4">
                            <div class="d-flex flex-column highlights_each w-100 h-100 align-items-center px-4" Style="max-width: 400px">
                                <MudAvatar Style="height:94px; width:94px; font-size:2rem; margin: 45px 0 15px -8px">
                                    <MudImage Src="img/eu_quadrado.jpg" Alt=""></MudImage>
                                </MudAvatar>
                                <MudText Typo="Typo.h5" Class="text_color_green fw-bold">REBECA SANTOS</MudText>
                                <MudText Typo="Typo.subtitle2" Class="text_color_yellow fw-bold">CIÊNCIA DA COMPUTAÇÃO</MudText>
                                <MudText Typo="Typo.body2" Align="Align.Justify" Class="text_color_white px-4 py-2">Rebeca ingressou na universidade em 2008 no curso de Ciência da Computação e concluiu em 2012. Em 2018 concluiu seu doutorado e hoje é professora titular na Stanford.</MudText>
                            </div>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </div>
</div>

@code {
    private int _indexGraph = -1; //default value cannot be 0 -> first selectedindex is 0.
    private List<ChartSeries> _series = new ();
    private string[] _xAxisLabels = { };

    private int? _egressQuantity;

    private bool _hasSuccessfullyRequestCountEgress = false;




    protected override async Task OnInitializedAsync()
    {
        await GetCountEgressPerFinalSemesterRequestAsync();
    }

    private async Task GetCountEgressPerFinalSemesterRequestAsync()
    {
        var response = await EgressServices.GetCountEgressPerFinalSemesterAsync();

        if (response.StatusCode.Equals((int)HttpStatusCode.OK))
        {
            _hasSuccessfullyRequestCountEgress = true;

            _egressQuantity = response.Data!.Total;

            _xAxisLabels = response.Data!.EgressPerYearList.Select(g => g.Key).ToArray()!;

            _series.Add(new ChartSeries
            {
                Name = "Egressos",
                Data = response.Data!.EgressPerYearList.Select(g => g.Value).ToArray()
            });
        }
    }
}