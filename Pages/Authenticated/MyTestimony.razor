@page "/me/meus-depoimentos"
@using System.Net
@using System.Net.Http.Headers
@using EgressPortal.Models
@using EgressPortal.Models.API.HttpClient.Egress.Person
@using EgressPortal.Shared.Testimonies
@using Microsoft.AspNetCore.Authorization
@inject ILoginServices LoginServices
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IEgressServices EgressServices
@inject IDialogService DialogService
@attribute [Authorize(Policy = "PersonIdentifierPolicy")]

<PageTitle>Meus depoimentos</PageTitle>

@if (!_loadingChangePage)
{
    <TitlePageLoggedComponent Person="_person"/>
}

<div class="d-flex flex-column align-items-center w-100">
    <div class="d-flex flex-column m-0 p-5 contact_main_center" style="width:100%;max-width: 1000px">
        <div class="d-flex flex-row justify-content-between align-items-center align-content-center m-0 p-0 mb-5">
            <MudText Align="Align.Start" Typo="Typo.h6">Meus Depoimentos</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="m-0 p-0" OnClick="ShowRequestFormDialog">Solicitar</MudButton>
        </div>
        @if (_loadingChangePage)
        {
            <div class="d-flex w-100 justify-content-center align-items-center align-content-center p-5">
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            </div>
        }
        else
        {
            @if (_person.Testimonies is not null && _person.Testimonies.Any())
            {
                <MudGrid Class="w-100 m-0 p-0">
                    @foreach (var t in _person.Testimonies)
                    {
                        <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudCard Outlined="true">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.subtitle2">Solicitado em @FormatDate(t.CreatedAt)</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        @if (t.WasAccepted)
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Success">Aprovado</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Warning">Pendente</MudChip>
                                        }
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (t.Content.Length > 200)
                                    {
                                        <MudText Typo="Typo.body2" Align="Align.Justify">@t.Content.Substring(0, 200)...</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Align="Align.Justify">@t.Content</MudText>
                                    }
                                </MudCardContent>
                                <MudCardActions Class="text-right">
                                    <a class="d-flex gap-2 w-100 justify-content-end pe-2 pb-2">
                                        <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="() => ShowMoreContentDialog(t)">Ver mais</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="() => ShowGenericConfirmDeleteDialog(t)">Excluir</MudButton>
                                    </a>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <div class="d-flex justify-content-center p-5">
                    <MudText Typo="Typo.body1">Nenhum depoimento cadastrado.</MudText>
                </div>
            }   
        }
    </div>
</div>

@code {
    #region Constants
    private const string USER_NOT_AUTHENTICATED_SNACKBAR_MESSAGE = "Usuário não autenticado";
    private const string SCHEME = "Bearer";
    private const string DELETE_MESSAGE_HEADER = "Deseja excluir?";
    private const string DELETE_MESSAGE_BODY = "Você tem certeza que deseja remover o depoimento solicitado dia {0}?";
    private const string SUCCESS_DELETE_MESSAGE = "Excluído com sucesso!";
    private const string WHITESPACE = " ";
    private const string REQUEST_MESSAGE_HEADER_DIALOG = "Solicitar Depoimento";
    #endregion
    
    private PersonResponseApi? _person;
    
    private bool _loadingChangePage = false;

    protected override async Task OnInitializedAsync()
    {
        _loadingChangePage = true;
        StateHasChanged();

        await UpdateTestimoniesListAsync();
        
        _loadingChangePage = false;
        StateHasChanged();
    }
    
    private void ShowGenericConfirmDeleteDialog(BaseResponseApi testimony)
    {
        var parameters = new DialogParameters<GenericConfirmDeleteDialog>();
        
        parameters.Add(x => x.ContentText, string.Format(DELETE_MESSAGE_BODY, FormatDate(testimony.CreatedAt)));
        parameters.Add(x => x.DeleteCallback, EventCallback.Factory.Create(this, async () => await DeleteTestimonyAsync(testimony.Id)));

        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.ExtraSmall
        };

        DialogService.Show<GenericConfirmDeleteDialog>(DELETE_MESSAGE_HEADER, parameters, options);
    }
    
    private void ShowRequestFormDialog()
    {
        var parameters = new DialogParameters<RequestTestimonyDialog>();

        parameters.Add(x => x.CallbackAsync, EventCallback.Factory.Create(this, async () => { await UpdateTestimoniesListAsync(); }));

        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        DialogService.Show<RequestTestimonyDialog>(REQUEST_MESSAGE_HEADER_DIALOG, parameters, options);
    }
    
    private void ShowMoreContentDialog(TestimonyResponseApi testimony)
    {
        var parameters = new DialogParameters<ShowMoreContentTestimonyDialog>();

        parameters.Add(x => x.Testimony, testimony);

        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        DialogService.Show<ShowMoreContentTestimonyDialog>(string.Empty, parameters, options);
    }

    #region Api Requests
    private async Task UpdateTestimoniesListAsync()
    {
        var token = await LoginServices.GetTokenAsync();

        if (token is null)
        {
            Snackbar.Add(USER_NOT_AUTHENTICATED_SNACKBAR_MESSAGE);
            await LoginServices.LogoutAsync();
            NavigationManager.NavigateTo(RouteSettings.LoginRoute);
            return;
        }

        var bearer = new AuthenticationHeaderValue(SCHEME, token!.AccessToken);

        var person = await EgressServices.GetPersonInfoAsync(bearer);

        if (person.StatusCode.Equals((int)HttpStatusCode.OK))
        {
            _person = person.Data!;
            StateHasChanged();
        }
        else
        {
            foreach (var error in person.Errors)
                Snackbar.Add(error, Severity.Error);
        }
    }
    
    private async Task DeleteTestimonyAsync(Guid id)
    {
        var token = await LoginServices.GetTokenAsync();

        if (token is null)
        {
            Snackbar.Add(USER_NOT_AUTHENTICATED_SNACKBAR_MESSAGE);
            await LoginServices.LogoutAsync();
            NavigationManager.NavigateTo(RouteSettings.LoginRoute);
            return;
        }
        
        var bearer = new AuthenticationHeaderValue(SCHEME, token!.AccessToken);

        var person = await EgressServices.DeleteTestimonyAsync(bearer, id);

        if (person.StatusCode.Equals((int)HttpStatusCode.NoContent))
        {
            await UpdateTestimoniesListAsync();
            Snackbar.Add(SUCCESS_DELETE_MESSAGE, Severity.Success);
        }
        else
        {
            foreach (var error in person.Errors)
                Snackbar.Add(error, Severity.Error);
        }
    }
    #endregion

    #region Static methods
    private static string FormatDate(DateTime date)
        => $"{date.Day:D2}/{date.Month:D2}/{date.Year}";

    private static string GetFirstName(string name)
        => name.Split(WHITESPACE).First();
    #endregion
}