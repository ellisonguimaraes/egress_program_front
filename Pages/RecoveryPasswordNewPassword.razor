@page "/recuperar-senha/nova-senha"
@using EgressPortal.Models.Form
@using EgressPortal.Services.Interfaces
@using EgressPortal.Shared.Auth
@inject IUserServices UserServices
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Esqueci a senha | Nova senha</PageTitle>

<TitlePageComponent Title="Recuperar senha" SubTitle="Crie uma nova senha"/>

@if (_loadingApiResponse)
{
    <MudProgressLinear Color="Color.Warning" Indeterminate="true" />
}

<div class="d-flex flex-column align-items-center w-100">
    <div class="d-flex flex-column m-0 p-5" style="width:100%;max-width: 700px;">
        @if (_wasUpdatePasswordSuccessfully)
        {
            <div class="d-flex flex-column gap-4 align-items-center py-12">
                <MudIcon Icon="@Icons.Material.Filled.LockReset" Style="font-size: 4rem;" Color="Color.Success"/>
                <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Dark" Style="font-weight: bold">Senha alterada com sucesso!</MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Dark">Você será redirecionado para a <b>página de login</b>...</MudText>
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            </div>
        }
        else
        {
            <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Dark" Class="mb-4">Para recuperar sua conta, crie uma nova senha.</MudText>
            <RecoveryPasswordNewPasswordComponent  OnValidSubmitEventCallback="OnValidSubmitCallbackAsync"/>
        }
    </div>
</div>

@code {
    private string _loginRoute = "login";

    private bool _wasUpdatePasswordSuccessfully = false;
    private bool _loadingApiResponse = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; }

    private async Task OnValidSubmitCallbackAsync(RecoveryPasswordNewPasswordForm recoveryPasswordNewPasswordForm)
    {
        _loadingApiResponse = true;
        StateHasChanged();

        await RecoveryPasswordAsync(Email, Token, recoveryPasswordNewPasswordForm.Password);

        _loadingApiResponse = false;
        StateHasChanged();
    }

    private async Task RecoveryPasswordAsync(string email, string token, string password)
    {
        var result = await UserServices.ResetPasswordAsync(email, token, password);

        if (result.StatusCode.Equals(204))
        {
            Snackbar.Add("Senha alterada com sucesso!", Severity.Success);

            _wasUpdatePasswordSuccessfully = true;
            _loadingApiResponse = false;
            StateHasChanged();

            await Task.Delay(5000);
            NavigationManager.NavigateTo(_loginRoute);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error, Severity.Error);
            }
        }
    }
}