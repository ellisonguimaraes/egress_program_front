@page "/egressos"
@using EgressPortal.Models.Form
@using System.Net
@using EgressPortal.Models.API.HttpClient.Egress
@using EgressPortal.Shared.Egress
@using EgressPortal.Shared.Utils
@inject IEgressServices EgressServices
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Egressos | Visualize nossos egressos.</PageTitle>

<TitlePageComponent Title="Egressos" SubTitle="Visualize nossos egressos."/>

<div class="d-flex flex-column align-items-center w-100">
    <div class="d-flex flex-column m-0 p-5" style="width:100%;max-width: 1000px;">
        <EgressListComponent/>
    </div>
</div>

@code {
    #region Constants
    private const int PAGE_SIZE = 3;
    #endregion

    private int _totalPages = 1;

    private EgressFilterForm _egressFilter = new() { FinalSemester = "Todos os semestres"};

    private List<GetEgressPaginateResponseApi> _egresses = new();

    private PaginationComponent<GetEgressPaginateResponseApi> _paginationComponent = null!;

    private async Task OnValidSubmitAsync() => await _paginationComponent.ChangePageNumberAsync(1);

    private async Task GetEgressPaginateAsync(int pageNumber)
    {
        var result = await EgressServices.GetPaginateEgressAsync(pageNumber, PAGE_SIZE, _egressFilter);

        if (result.StatusCode.Equals((int)HttpStatusCode.OK))
        {
            _egresses = result.Data!.Data!.ToList();
            _totalPages = result.Data.TotalPages;
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error, Severity.Error);
            }
        }
    }

    private async Task CleanEgressFilterAsync()
    {
        _egressFilter = new EgressFilterForm { FinalSemester = "Todos os semestres"};
        await OnValidSubmitAsync();
    }

    private static IEnumerable<string> GenerateFinalSemestersToSelect()
    {
        var semesters = new List<string>();

        for (var i = DateTime.UtcNow.Year; i >= 1960; i--)
        {
            semesters.Add($"{i}.2");
            semesters.Add($"{i}.1");
        }

        return semesters.OrderDescending();
    }
    
    private Task OpenDialogAsync(GetEgressPaginateResponseApi egress)
    {
        var parameters = new DialogParameters<ShowMorePublicEgressPaginate_Dialog>();

        parameters.Add(x => x.Egress, egress);

        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        return DialogService.ShowAsync<ShowMorePublicEgressPaginate_Dialog>("Dados", parameters, options);
    }
}