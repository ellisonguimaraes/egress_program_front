@typeparam TItem

<div class="d-flex flex-column w-100">
    <div class="d-flex w-100 flex-column">
        @if (_loadingChangePage)
        {
            <div class="d-flex w-100 justify-content-center align-items-center align-content-center p-5">
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            </div>
        }
        else
        {
            @foreach (var item in Items)
            {
                @ViewItemComponent(item)
            }
        }
    </div>
    <div class="d-flex w-100 justify-content-center">
        <MudPagination Variant="Variant.Text" BoundaryCount="1" MiddleCount="3" Count="@TotalPages" SelectedChanged="SelectedChangedAsync" Class="mt-4"/>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public RenderFragment<TItem> ViewItemComponent { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public List<TItem> Items { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback<int> ChangePageNumberCallback { get; set; }

    [Parameter]
    [EditorRequired]
    public int TotalPages { get; set; }

    private int _selected = 1;

    private bool _loadingChangePage = false;

    protected override async Task OnInitializedAsync()
    {
        await SelectedChangedAsync(_selected);
    }

    private async Task SelectedChangedAsync(int pageNumber)
    {
        _selected = pageNumber;

        _loadingChangePage = true;
        StateHasChanged();

        await ChangePageNumberCallback.InvokeAsync(pageNumber);

        _loadingChangePage = false;
        StateHasChanged();
    }
}