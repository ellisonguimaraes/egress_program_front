@typeparam TItem

<div class="d-flex flex-column w-100">
    <div class="d-flex w-100 flex-column">
        @if (_loadingChangePage)
        {
            <div class="d-flex w-100 justify-content-center align-items-center align-content-center p-5">
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            </div>
        }
        else
        {
            if (Items.Any())
            {
                if (ViewItemComponent is not null)
                {
                    @foreach (var item in Items)
                    {
                        @ViewItemComponent(item)
                    }
                }
                else if (ViewAllItemsComponent is not null)
                {
                    @ViewAllItemsComponent(Items)
                }
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle2" Class="m-5">Não há itens cadastrados</MudText>
            }
        }
    </div>
    <div class="d-flex w-100 justify-content-center">
        <MudPagination @ref="_mudPagination" Variant="Variant.Text" BoundaryCount="1" MiddleCount="3" Count="@TotalPages" SelectedChanged="SelectedChangedAsync" Class="mt-4"/>
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment<TItem> ViewItemComponent { get; set; } = null!;

    [Parameter]
    public RenderFragment<List<TItem>> ViewAllItemsComponent { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public List<TItem> Items { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback<int> ChangePageNumberCallback { get; set; }

    [Parameter]
    [EditorRequired]
    public int TotalPages { get; set; }

    private int _selected = 1;

    private bool _loadingChangePage = false;

    private MudPagination _mudPagination = null!;

    protected override async Task OnInitializedAsync()
    {
        await SelectedChangedAsync(_selected);
    }

    private async Task SelectedChangedAsync(int pageNumber)
    {
        _selected = pageNumber;

        _loadingChangePage = true;
        StateHasChanged();

        await ChangePageNumberCallback.InvokeAsync(pageNumber);

        _loadingChangePage = false;
        StateHasChanged();
    }

    public async Task ChangePageNumberAsync(int pageNumber)
    {
        if (pageNumber.Equals(_mudPagination.Selected))
        {
            await ChangePageNumberCallback.InvokeAsync(pageNumber);
        }
        else
        {
            _mudPagination.Selected = pageNumber;
            StateHasChanged();
        }
    }
}