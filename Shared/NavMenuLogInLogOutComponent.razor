@using System.Net
@using System.Net.Http.Headers
@using System.Security.Claims
@using EgressPortal.Models
@using EgressPortal.Models.API.HttpClient.Egress.Person
@inject IEgressServices EgressServices
@inject ILoginServices LoginServices
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" EndIcon="@Icons.Material.Filled.ArrowDropDown">
            <ActivatorContent>
                <div class="d-flex flex-row align-content-center align-items-center justify-content-center">
                    <MudText Class="m-2 fw-bold text_color_darkgreen" Typo="Typo.body2">@GetFirstName(context.User.Identity!.Name!.ToUpper())</MudText>
                    <MudAvatar Color="Color.Primary">
                        @if (string.IsNullOrWhiteSpace(_person?.PerfilImage))
                        {
                            <b>@context.User.Identity!.Name![0]</b>
                        }
                        else
                        {
                            <MudImage Src="@_person.PerfilImage" Alt="avatar"/>
                        }
                    </MudAvatar>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Class="text_color_darkgreen" Size="Size.Medium"/>
                </div>
            </ActivatorContent>
            <ChildContent>
                @if (IsAdmin(context.User.Claims.SingleOrDefault(c => c.Type.Equals(ClaimTypes.Role))?.Value))
                {
                    <MudMenuItem Href="@RouteSettings.AdminEgressRoute">Gerenciar</MudMenuItem>
                }
                else
                {
                    <MudMenuItem Href="@RouteSettings.AuthStartPage">Home</MudMenuItem>
                    <MudMenuItem Href="@RouteSettings.AuthMyTestimony">Meus depoimentos</MudMenuItem>
                    <MudMenuItem Href="@RouteSettings.AuthMyHighlights">Meus destaques</MudMenuItem>
                    <MudMenuItem Href="@RouteSettings.AuthUpdate">Atualizar Perfil</MudMenuItem>
                }
                <MudMenuItem OnClick="LogoutAsync">Sair</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Login" Href="@RouteSettings.LoginRoute">ACESSAR</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    #region Constants
    private const string SEPARATOR_NAME = " ";
    private const string USER_NOT_AUTHENTICATED_SNACKBAR_MESSAGE = "Usuário não autenticado";
    private const string SCHEME = "Bearer";
    #endregion
    
    private PersonResponseApi? _person = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetPersonAsync();
    }

    private async Task LogoutAsync()
    {
        NavigationManager.NavigateTo(RouteSettings.HomeRoute);
        await LoginServices.LogoutAsync();
    }
    
    #region Api Requests
    private async Task GetPersonAsync()
    {
        var token = await LoginServices.GetTokenAsync();

        if (token is null)
        {
            await LoginServices.LogoutAsync();
            return;
        }

        var bearer = new AuthenticationHeaderValue(SCHEME, token!.AccessToken);

        var person = await EgressServices.GetPersonInfoAsync(bearer);

        if (person.StatusCode.Equals((int)HttpStatusCode.OK))
        {
            _person = person.Data;
            StateHasChanged();
        }
        else
        {
            foreach (var error in person.Errors)
                Snackbar.Add(error, Severity.Error);
        }
    }
    #endregion

    #region Static Methods
    private static string GetFirstName(string fullName)
    {
        var names = fullName.Split(SEPARATOR_NAME);
        return names[0];
    }

    private static bool IsAdmin(string? role)
        => !string.IsNullOrWhiteSpace(role) && role.Equals(PermissionType.ADM.ToString());
    #endregion

}
