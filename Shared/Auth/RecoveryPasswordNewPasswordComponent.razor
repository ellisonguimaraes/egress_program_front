@using EgressPortal.Models.Form

<EditForm OnValidSubmit="OnValidSubmitAsync" Model="_recoveryPasswordNewPasswordForm">
    <DataAnnotationsValidator/>
    <MudGrid Class="d-flex flex-column gap-4 m-0 p-0">
        <MudItem xs="12" sm="12" md="12" lg="12" Class="m-0 p-0">
            <MudTextField @bind-Value="_recoveryPasswordNewPasswordForm.Password" Placeholder="Senha" Label="Senha" Variant="Variant.Outlined" InputType="@_passwordInput" For="@(() => _recoveryPasswordNewPasswordForm.Password)" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ButtonShowPassword" AdornmentAriaLabel="Mostrar senha"/>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="12" Class="m-0 p-0">
            <MudTextField @bind-Value="_recoveryPasswordNewPasswordForm.RepeatPassword" Placeholder="Repetir senha" Label="Repetir senha" Variant="Variant.Outlined" InputType="@_repeatPasswordInput" For="@(() => _recoveryPasswordNewPasswordForm.RepeatPassword)" Adornment="Adornment.End" AdornmentIcon="@_repeatPasswordInputIcon" OnAdornmentClick="ButtonShowRepeatPassword" AdornmentAriaLabel="Mostrar senha"/>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="12" Class="d-flex flex-row justify-content-center m-0 p-0">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_buttonSubmitDisabled">Recuperar</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private RecoveryPasswordNewPasswordForm _recoveryPasswordNewPasswordForm = new RecoveryPasswordNewPasswordForm();

    private bool _buttonSubmitDisabled = false;

    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _isShowPassword;

    private InputType _repeatPasswordInput = InputType.Password;
    private string _repeatPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _isShowRepeatPassword;

    [Parameter]
    [EditorRequired]
    public EventCallback<RecoveryPasswordNewPasswordForm> OnValidSubmitEventCallback { get; set; }

    private async Task OnValidSubmitAsync()
    {
        _buttonSubmitDisabled = true;
        await OnValidSubmitEventCallback.InvokeAsync(_recoveryPasswordNewPasswordForm);
        _buttonSubmitDisabled = false;
    }

    private void ButtonShowPassword(){
        @if (_isShowPassword)
        {
            _isShowPassword = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else {
            _isShowPassword = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void ButtonShowRepeatPassword(){
        @if (_isShowRepeatPassword)
        {
            _isShowRepeatPassword = false;
            _repeatPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            _repeatPasswordInput = InputType.Password;
        }
        else {
            _isShowRepeatPassword = true;
            _repeatPasswordInputIcon = Icons.Material.Filled.Visibility;
            _repeatPasswordInput = InputType.Text;
        }
    }
}