@using EgressPortal.Models.Form.Enums

<MudDialog @bind-IsVisible="_isVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="fw-bold">
            <MudIcon Icon="@Icons.Material.Filled.School" Class="mr-3" /> Novo Curso
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm OnValidSubmit="OnValidSubmitAsync" Model="_courseForm">
            <DataAnnotationsValidator/>

            <MudGrid Class="d-flex flex-row mb-4">
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudTextField Variant="Variant.Outlined" Placeholder="Curso" Label="Curso" @bind-Value="_courseForm.CourseName" For="@(() => _courseForm.CourseName)"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudTextField Variant="Variant.Outlined" Placeholder="Instituição" Label="Instituição" @bind-Value="_courseForm.InstitutionName" For="@(() => _courseForm.InstitutionName)"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudSelect @bind-Value="_courseForm.Modality" Label="Modalidade" Variant="Variant.Outlined">
                        <MudSelectItem Value="@(Modality.Presential)">Presencial</MudSelectItem>
                        <MudSelectItem Value="@(Modality.Hybrid)">Híbrido</MudSelectItem>
                        <MudSelectItem Value="@(Modality.Remote)">Remoto</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudSelect @bind-Value="_courseForm.Level" Label="Tipo" Variant="Variant.Outlined">
                        <MudSelectItem Value="@(Level.Graduation)">Graduação</MudSelectItem>
                        <MudSelectItem Value="@(Level.Postgraduate)">Pós Graduação</MudSelectItem>
                        <MudSelectItem Value="@(Level.MasterDegree)">Mestrado</MudSelectItem>
                        <MudSelectItem Value="@(Level.DoctorateDegree)">Doutorado</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudDatePicker DateFormat="dd/MM/yyyy" Mask="@(new DateMask("dd/MM/yyyy"))" Variant="Variant.Outlined" Label="Data de Início" Editable="true" @bind-Date="_courseForm.StartDate" For="@(() => _courseForm.StartDate)" Placeholder="dd/MM/aaaa" />
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudDatePicker DateFormat="dd/MM/yyyy" Mask="@(new DateMask("dd/MM/yyyy"))" Variant="Variant.Outlined" Label="Data de Término" Editable="true" @bind-Date="_courseForm.EndDate" For="@(() => _courseForm.EndDate)" Placeholder="dd/MM/aaaa" />
                </MudItem>
            </MudGrid>

            <div class="d-flex flex-row w-100 justify-content-end gap-3 pb-3">
                <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="Close">Cancelar</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" ButtonType="ButtonType.Submit">Adicionar</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    [EditorRequired]
    public EventCallback<CompleteRegisterCourseForm> OnValidSubmitCallback { get; set; }

    private bool _isVisible { get; set; }  = false;

    private CompleteRegisterCourseForm _courseForm = new ();

    private DialogOptions _dialogOptions = new ()
    {
        DisableBackdropClick = true,
        FullWidth = true,
        CloseButton = true
    };

    public void Close()
    {
        _isVisible = false;
        CleanForm();
        StateHasChanged();
    }

    public void Open()
    {
        _isVisible = true;
        CleanForm();
        StateHasChanged();
    }

    private void CleanForm() => 
        _courseForm = new () {
            Modality = Modality.Presential,
            Level = Level.Graduation
        };

    private async Task OnValidSubmitAsync()
    {
        await OnValidSubmitCallback.InvokeAsync(_courseForm);
        Close();
    }
}